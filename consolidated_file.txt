===== image-compressor-plugin/includes/class-image-compressor.php =====
<?php
if (!defined('ABSPATH')) exit;

class Image_Compressor {
    public function __construct() {
        // Hook into the admin menu to create the dashboard page
        add_action('admin_menu', [$this, 'add_admin_menu']);
        // Hook to enqueue custom scripts and styles for the admin dashboard
        add_action('admin_enqueue_scripts', [$this, 'enqueue_assets']);
    }

    /**
     * Add a menu page for the Image Compressor plugin.
     */
    public function add_admin_menu() {
        add_menu_page(
            'Image Compressor',               // Page title
            'Image Compressor',               // Menu title
            'manage_options',                 // Capability required
            'image-compressor',               // Menu slug
            [$this, 'render_dashboard'],      // Callback function
            'dashicons-image-filter',         // Icon for the menu
            80                                // Position in the menu
        );
    }

    /**
     * Enqueue styles and scripts for the admin dashboard.
     *
     * @param string $hook The current admin page.
     */
    public function enqueue_assets($hook) {
        // Only enqueue assets on the Image Compressor dashboard page
        if ($hook !== 'toplevel_page_image-compressor') return;

        // Enqueue custom CSS for the plugin
        wp_enqueue_style(
            'image-compressor-css', 
            IMAGE_COMPRESSOR_PLUGIN_URL . 'assets/css/admin.css'
        );

        // Enqueue custom JavaScript for the plugin
        wp_enqueue_script(
            'image-compressor-js', 
            IMAGE_COMPRESSOR_PLUGIN_URL . 'assets/js/admin.js', 
            ['jquery'], 
            null, 
            true
        );

        // Enqueue Lightbox2 CSS via CDN
        wp_enqueue_style(
            'lightbox-css', 
            'https://cdn.jsdelivr.net/npm/lightbox2@2.11.5/dist/css/lightbox.min.css'
        );

        // Enqueue Lightbox2 JavaScript via CDN
        wp_enqueue_script(
            'lightbox-js', 
            'https://cdn.jsdelivr.net/npm/lightbox2@2.11.5/dist/js/lightbox.min.js', 
            ['jquery'], 
            null, 
            true
        );

        // Localize JavaScript for AJAX calls
        wp_localize_script('image-compressor-js', 'imageCompressor', [
            'ajaxUrl' => admin_url('admin-ajax.php'),
            'nonce'   => wp_create_nonce('image_compressor_nonce'),
        ]);
    }

    /**
     * Render the admin dashboard page for the Image Compressor plugin.
     */
    public function render_dashboard() {
        // Include the dashboard template
        include IMAGE_COMPRESSOR_PLUGIN_DIR . 'templates/admin-dashboard.php';
    }
}


===== image-compressor-plugin/includes/class-image-handler.php =====
<?php
if (!defined('ABSPATH')) exit;

class Image_Handler {
    public static function compress_image($image_path, $quality) {
        $info = getimagesize($image_path);
        if (!$info || !isset($info['mime'])) return false;

        $mime = $info['mime'];
        $image = null;

        switch ($mime) {
            case 'image/jpeg':
                $image = imagecreatefromjpeg($image_path);
                ob_start();
                imagejpeg($image, null, $quality);
                break;
            case 'image/png':
                $image = imagecreatefrompng($image_path);
                ob_start();
                imagepng($image);
                break;
            case 'image/gif':
                $image = imagecreatefromgif($image_path);
                ob_start();
                imagegif($image);
                break;
            default:
                return false; // Unsupported format
        }

        $compressed_data = ob_get_clean();
        imagedestroy($image);

        return $compressed_data;
    }

    public static function handle_ajax_request() {
        check_ajax_referer('image_compressor_nonce', 'security');

        $image_id = intval($_POST['image_id']);
        $quality = intval($_POST['quality']);
        $replace = isset($_POST['replace']) && $_POST['replace'] === 'true';

        if ($quality < 10 || $quality > 100) {
            wp_send_json_error(['message' => 'Quality must be between 10 and 100.']);
            return;
        }

        $image_path = sanitize_text_field(get_attached_file($image_id));
        if (!file_exists($image_path)) {
            wp_send_json_error(['message' => 'File does not exist.']);
            return;
        }

        $original_size = filesize($image_path);
        $compressed_data = self::compress_image($image_path, $quality);

        if ($compressed_data) {
            // Replace the original file
            if ($replace) {
                file_put_contents($image_path, $compressed_data);
                clearstatcache(true, $image_path); // Clear file cache
                $new_size = filesize($image_path);

                // Update WordPress metadata to refresh the file details
                wp_update_attachment_metadata($image_id, wp_generate_attachment_metadata($image_id, $image_path));

                wp_send_json_success([
                    'message'       => 'File replaced successfully.',
                    'original_size' => size_format($original_size),
                    'new_size'      => size_format($new_size),
                    'saved_space'   => size_format($original_size - $new_size)
                ]);
            } else {
                // Save compressed file alongside original if not replacing
                $new_path = pathinfo($image_path, PATHINFO_DIRNAME) . '/' . pathinfo($image_path, PATHINFO_FILENAME) . '-compressed.' . pathinfo($image_path, PATHINFO_EXTENSION);
                file_put_contents($new_path, $compressed_data);
                $new_size = filesize($new_path);

                wp_send_json_success([
                    'message'       => 'File compressed successfully.',
                    'original_size' => size_format($original_size),
                    'new_size'      => size_format($new_size),
                    'saved_space'   => size_format($original_size - $new_size),
                    'new_file_url'  => wp_get_attachment_url($image_id)
                ]);
            }
        } else {
            wp_send_json_error(['message' => 'Compression failed.']);
        }
    }
}

add_action('wp_ajax_compress_image', ['Image_Handler', 'handle_ajax_request']);


===== image-compressor-plugin/image-compressor-plugin.php =====
<?php
/**
 * Plugin Name: Image Compressor Plugin
 * Description: Compress and manage images directly within the WordPress media library.
 * Version: 1.3.0
 * Author: Aaditya Goenka
 * License: GPL-2.0+
 */

if (!defined('ABSPATH')) exit;

define('IMAGE_COMPRESSOR_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('IMAGE_COMPRESSOR_PLUGIN_URL', plugin_dir_url(__FILE__));

// Include required classes
require_once IMAGE_COMPRESSOR_PLUGIN_DIR . 'includes/class-image-compressor.php';
require_once IMAGE_COMPRESSOR_PLUGIN_DIR . 'includes/class-image-handler.php';

// Initialize the plugin
function image_compressor_init() {
    new Image_Compressor();
}
add_action('plugins_loaded', 'image_compressor_init');


===== image-compressor-plugin/templates/admin-dashboard.php =====
<div class="image-compressor-dashboard">
    <h1>Image Compressor</h1>
    <p>Select images to compress. Adjust the quality slider and review changes before replacing the original image.</p>
    <div id="loading-spinner" style="display:none;">Processing...</div>

    <table id="image-table">
        <thead>
            <tr>
                <th>Preview (Before)</th>
                <th>Preview (After)</th>
                <th>File Name</th>
                <th>Current Size</th>
                <th>New Size</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <?php
            $args = [
                'post_type'      => 'attachment',
                'post_mime_type' => ['image/jpeg', 'image/png', 'image/gif'],
                'post_status'    => 'inherit',
                'posts_per_page' => -1,
            ];

            $images = new WP_Query($args);

            if ($images->have_posts()) :
                while ($images->have_posts()) : $images->the_post();
                    $image_id = get_the_ID();
                    $image_url = wp_get_attachment_url($image_id);
                    $image_path = get_attached_file($image_id);
                    $image_size = file_exists($image_path) ? filesize($image_path) : 0;
            ?>
                    <tr>
                        <!-- Original Image Preview -->
                        <td>
                            <a href="<?php echo esc_url($image_url); ?>" data-lightbox="pre-compression-<?php echo $image_id; ?>" data-title="Original Image">
                                <img src="<?php echo esc_url($image_url); ?>" alt="Original Image" style="max-width: 100px;">
                            </a>
                        </td>
                        <!-- Placeholder for Compressed Image Preview -->
                        <td class="post-compression-preview-<?php echo $image_id; ?>">
                            <span>No compressed image yet.</span>
                        </td>
                        <td><?php the_title(); ?></td>
                        <td><?php echo size_format($image_size); ?></td>
                        <td class="new-size">-</td>
                        <td>
                            <div class="slider-container">
                                <span class="slider-label">-</span>
                                <input type="range" id="quality-slider-<?php echo $image_id; ?>" min="10" max="100" value="80" class="quality-slider">
                                <span class="slider-label">+</span>
                            </div>
                            <button class="compress-btn" data-id="<?php echo $image_id; ?>">Compress</button>
                            <button class="replace-btn" data-id="<?php echo $image_id; ?>">Replace Original</button>
                        </td>
                    </tr>
            <?php
                endwhile;
            else :
            ?>
                <tr>
                    <td colspan="6">No images found in the media library.</td>
                </tr>
            <?php
            endif;
            wp_reset_postdata();
            ?>
        </tbody>
    </table>
</div>


===== image-compressor-plugin/assets/js/admin.js =====
jQuery(document).ready(function ($) {
    const showLoading = () => $('#loading-spinner').show();
    const hideLoading = () => $('#loading-spinner').hide();

    /**
     * Handle compression and generate preview.
     */
    $(document).on('click', '.compress-btn', function () {
        const imageId = $(this).data('id');
        const quality = $(`#quality-slider-${imageId}`).val();

        if (quality < 10 || quality > 100) {
            alert('Quality must be between 10 and 100.');
            return;
        }

        showLoading();
        $.post(imageCompressor.ajaxUrl, {
            action: 'compress_image',
            security: imageCompressor.nonce,
            image_id: imageId,
            quality: quality,
            replace: false
        }, function (response) {
            hideLoading();
            if (response.success) {
                const newSize = size_format(response.data.new_size);
                const savedSpace = size_format(response.data.saved_space);
                const newFileUrl = response.data.new_file_url;

                // Update new size in the table
                $(`button[data-id=${imageId}]`).closest('tr').find('.new-size').text(newSize);

                // Update compressed image preview
                const previewCell = $(`.post-compression-preview-${imageId}`);
                previewCell.html(`
                    <a href="${newFileUrl}" data-lightbox="post-compression-${imageId}" data-title="Compressed Image">
                        <img src="${newFileUrl}" alt="Compressed Image" style="max-width: 100px;">
                    </a>
                `);

                alert(`Image compressed successfully! Saved space: ${savedSpace}`);
            } else {
                alert('Error: ' + response.data.message);
            }
        });
    });

    /**
     * Replace original image with compressed version.
     */
    $(document).on('click', '.replace-btn', function () {
        const imageId = $(this).data('id');
        const quality = $(`#quality-slider-${imageId}`).val();

        if (quality < 10 || quality > 100) {
            alert('Quality must be between 10 and 100.');
            return;
        }

        if (!confirm('Are you sure you want to replace the original image with the compressed version? This action cannot be undone.')) {
            return;
        }

        showLoading();
        $.post(imageCompressor.ajaxUrl, {
            action: 'compress_image',
            security: imageCompressor.nonce,
            image_id: imageId,
            quality: quality,
            replace: true
        }, function (response) {
            hideLoading();
            if (response.success) {
                const newSize = size_format(response.data.new_size);
                const savedSpace = size_format(response.data.saved_space);

                // Update new size in the table
                $(`button[data-id=${imageId}]`).closest('tr').find('.new-size').text(newSize);

                alert(`Original image replaced successfully! Saved space: ${savedSpace}`);
            } else {
                alert('Error: ' + response.data.message);
            }
        });
    });

    /**
     * Format size in human-readable format.
     */
    const size_format = (bytes) => {
        if (bytes >= 1073741824) {
            return (bytes / 1073741824).toFixed(2) + ' GB';
        } else if (bytes >= 1048576) {
            return (bytes / 1048576).toFixed(2) + ' MB';
        } else if (bytes >= 1024) {
            return (bytes / 1024).toFixed(2) + ' KB';
        } else {
            return bytes + ' bytes';
        }
    };
});


===== image-compressor-plugin/assets/css/admin.css =====
/* General Styling */
.image-compressor-dashboard {
    font-family: 'Arial', sans-serif;
    color: #333;
    background: linear-gradient(145deg, #F2E9E9, #BFB0B0);
    border-radius: 20px;
    padding: 20px;
    box-shadow: 10px 10px 20px #8C8627, -10px -10px 20px #D9B036;
    max-width: 1200px;
    margin: 0 auto;
}

.slider-container {
    display: flex;
    align-items: center;
    justify-content: center;
}

.slider-label {
    font-weight: bold;
    padding: 0 5px;
    color: #8C8627;
}


/* Table Styles */
#image-table {
    width: 100%;
    border-collapse: collapse;
    background: #F2E9E9;
    box-shadow: inset 5px 5px 10px #BFB0B0, inset -5px -5px 10px #FFFFFF;
    border-radius: 15px;
    overflow: hidden;
    margin-top: 20px;
}

#image-table th, #image-table td {
    padding: 15px;
    text-align: left;
    font-size: 14px;
}

#image-table th {
    background: #8C8627;
    color: #FFFFFF;
    font-weight: bold;
    text-transform: uppercase;
}

#image-table td {
    background: #F28B30;
    color: #333;
    border-radius: 8px;
    box-shadow: 2px 2px 5px #BFB0B0, -2px -2px 5px #FFFFFF;
    text-align: center;
}

#image-table img {
    max-width: 80px;
    border-radius: 8px;
    box-shadow: 3px 3px 6px #BFB0B0, -3px -3px 6px #FFFFFF;
}

/* Buttons */
.compress-btn {
    background: linear-gradient(145deg, #D9B036, #F28B30);
    color: #FFFFFF;
    border: none;
    padding: 8px 16px;
    border-radius: 30px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    font-weight: bold;
    text-transform: uppercase;
    box-shadow: 5px 5px 10px #8C8627, -5px -5px 10px #D9B036;
}

.compress-btn:hover {
    background: linear-gradient(145deg, #F28B30, #D9B036);
    box-shadow: 5px 5px 15px #8C8627, -5px -5px 15px #D9B036;
    transform: scale(1.05);
}

/* Slider */
#quality-slider {
    width: 100%;
    -webkit-appearance: none;
    height: 8px;
    border-radius: 5px;
    background: linear-gradient(145deg, #F28B30, #D9B036);
    outline: none;
    opacity: 0.8;
    transition: opacity 0.2s, box-shadow 0.3s;
    box-shadow: inset 5px 5px 10px #8C8627, inset -5px -5px 10px #FFFFFF;
}

#quality-slider:hover {
    opacity: 1;
    box-shadow: inset 3px 3px 6px #8C8627, inset -3px -3px 6px #FFFFFF;
}

#quality-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(145deg, #D9B036, #8C8627);
    cursor: pointer;
    box-shadow: 5px 5px 10px #8C8627, -5px -5px 10px #FFFFFF;
    transition: transform 0.2s ease-in-out;
}

#quality-slider::-webkit-slider-thumb:hover {
    transform: scale(1.2);
}

#quality-slider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(145deg, #D9B036, #8C8627);
    cursor: pointer;
    box-shadow: 5px 5px 10px #8C8627, -5px -5px 10px #FFFFFF;
    transition: transform 0.2s ease-in-out;
}

#quality-slider::-moz-range-thumb:hover {
    transform: scale(1.2);
}

/* Lightbox Styling */
a[data-lightbox="image-preview"] img {
    cursor: zoom-in;
    transition: transform 0.2s ease-in-out;
}

a[data-lightbox="image-preview"] img:hover {
    transform: scale(1.05);
}

/* Responsive Design */
@media (max-width: 768px) {
    .image-compressor-dashboard {
        padding: 15px;
    }

    #image-table th, #image-table td {
        font-size: 12px;
        padding: 10px;
    }

    .compress-btn {
        padding: 6px 12px;
    }

    #image-table img {
        max-width: 60px;
    }
}
.quality-label {
    font-weight: bold;
    margin-left: 10px;
    color: #333;
}


